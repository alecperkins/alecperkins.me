// Generated by CoffeeScript 1.4.0
(function() {
  var $content, NOW, calcWidth, displayItems, grid_size, items, max_score, min_score, renderInstagram, renderTwitter, scoreInstagram, scoreTwitter, setMaxMin;

  grid_size = 24;

  max_score = -1;

  min_score = 1e10;

  calcWidth = function(score) {
    var half_grid, width;
    half_grid = 306 / 2;
    console.log(score / max_score);
    width = (half_grid + ((score / max_score) * half_grid)).toFixed(0);
    console.log('score', score, 'width', width);
    return width;
  };

  renderInstagram = function(item) {
    var $photo, photo, score, width;
    photo = item.data;
    score = item.score;
    $photo = $("<div class=\"item photo\">\n    <img src=\"" + photo.urls.low_resolution.url + "\">\n    <a class=\"link\" href=\"" + photo.link + "\">#</a>\n</div>");
    width = calcWidth(score);
    $photo.css({
      'width': "" + width + "px"
    });
    return $photo;
  };

  renderTwitter = function(item) {
    var $tweet, font_size, half_grid, media_list, score, text, tweet;
    score = item.score;
    tweet = item.data;
    text = new NOAT(tweet.text);
    $.each(tweet.entities.hashtags, function(i, t) {
      return text.add('a', t.indices[0], t.indices[1], {
        href: "https://twitter.com/?q=%23" + (t.text.substring(1))
      });
    });
    $.each(tweet.entities.urls, function(i, t) {
      return text.add('a', t.indices[0], t.indices[1], {
        href: t.url,
        'data-display_url': t.display_url
      });
    });
    $.each(tweet.entities.user_mentions, function(i, t) {
      return text.add('a', t.indices[0], t.indices[1], {
        href: "https://twitter.com/" + t.screen_name
      });
    });
    media_list = tweet.entities.media || [];
    $.each(media_list, function(i, t) {
      return text.add('span', t.indices[0], t.indices[1], {
        'data-image': t.media_url,
        'data-display_url': t.display_url
      });
    });
    $tweet = $("<div class=\"item tweet\">\n    " + (text.toString()) + "\n    <a class=\"link\" href=\"https://twitter.com/alecperkins/status/" + tweet.id + "\">#</a>\n</div>");
    $tweet.find('[data-display_url]').each(function(i, tag) {
      var $tag;
      $tag = $(tag);
      return $tag.text($tag.attr('data-display_url'));
    });
    half_grid = grid_size / 2;
    font_size = (half_grid + (score / max_score * half_grid)).toFixed(0);
    console.log(font_size);
    if (font_size > grid_size) {
      font_size = grid_size;
    }
    $tweet.css({
      'font-size': "" + font_size + "px",
      'width': "" + (calcWidth(score)) + "px"
    });
    return $tweet;
  };

  NOW = (new Date()).getTime();

  scoreInstagram = function(item) {
    var score, time_delta;
    time_delta = NOW - new Date(item.date).getTime();
    score = (1 / time_delta * 1e10).toFixed(2);
    score = score * (item.comments_count + (2 * item.likes_count) + 1);
    return score;
  };

  scoreTwitter = function(item) {
    var score, time_delta;
    time_delta = NOW - new Date(item.date).getTime();
    score = (1 / time_delta * 1e10).toFixed(2);
    score = score * (item.retweet_count * 2 + 1);
    return score;
  };

  setMaxMin = function(score) {
    if (score > max_score) {
      return max_score = score;
    } else if (score < min_score) {
      return min_score = score;
    }
  };

  $content = $('.content');

  items = {};

  displayItems = function() {
    var item_list;
    if ((items.twitter != null) && (items.instagram != null)) {
      item_list = [];
      item_list.push.apply(item_list, items.twitter);
      item_list.push.apply(item_list, items.instagram);
      item_list.sort(function(a, b) {
        return b.score - a.score;
      });
      return $.each(item_list, function(i, item) {
        if (item.type === 'instagram') {
          item.html = renderInstagram(item);
        } else {
          item.html = renderTwitter(item);
        }
        item.html.attr('title', item.score);
        return $content.append(item.html);
      });
    }
  };

  $.getJSON('/data/instagram', function(response) {
    var item, score, _i, _len;
    items.instagram = [];
    for (_i = 0, _len = response.length; _i < _len; _i++) {
      item = response[_i];
      score = scoreInstagram(item);
      setMaxMin(score);
      items.instagram.push({
        data: item,
        score: score,
        type: 'instagram'
      });
    }
    return displayItems();
  });

  $.getJSON('/data/twitter', function(response) {
    var item, score, _i, _len;
    items.twitter = [];
    for (_i = 0, _len = response.length; _i < _len; _i++) {
      item = response[_i];
      score = scoreTwitter(item);
      setMaxMin(score);
      items.twitter.push({
        data: item,
        score: score,
        type: 'twitter'
      });
    }
    return displayItems();
  });

}).call(this);
